// <auto-generated />
using System;
using DemiAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DemiAPI.Migrations
{
    [DbContext(typeof(MetalMusicContext))]
    [Migration("20211210050133_GenreDerived")]
    partial class GenreDerived
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DemiAPI.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("Album_id");

                    b.Property<int>("AlbumArtistId")
                        .HasColumnType("int")
                        .HasColumnName("Album_Artist_Id");

                    b.Property<string>("AlbumLabel")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Album_label");

                    b.Property<string>("AlbumName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Album_name");

                    b.Property<int>("AlbumReleaseNumber")
                        .HasColumnType("int")
                        .HasColumnName("Album_Release_Number");

                    b.Property<int>("AlbumSales")
                        .HasColumnType("int")
                        .HasColumnName("Album_sales");

                    b.Property<int?>("AlbumYear")
                        .HasColumnType("int")
                        .HasColumnName("Album_year");

                    b.HasKey("AlbumId");

                    b.HasIndex("AlbumArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("DemiAPI.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int")
                        .HasColumnName("Artist_id");

                    b.Property<string>("ArtistBass")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Artist_Bass");

                    b.Property<string>("ArtistBio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Artist_bio");

                    b.Property<string>("ArtistDrums")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Artist_Drums");

                    b.Property<int>("ArtistGenreId")
                        .HasColumnType("int")
                        .HasColumnName("Artist_genre_id");

                    b.Property<string>("ArtistGuitarOne")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Artist_Guitar_one");

                    b.Property<string>("ArtistGuitarTwo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Artist_Guitar_two");

                    b.Property<string>("ArtistName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Artist_name");

                    b.Property<string>("ArtistSinger")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Artist_Singer");

                    b.HasKey("ArtistId");

                    b.HasIndex("ArtistGenreId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("DemiAPI.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("Genre_id");

                    b.Property<int>("DerivedFrom")
                        .HasColumnType("int")
                        .HasColumnName("Derived_from");

                    b.Property<string>("GenreDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Genre_description");

                    b.Property<int?>("GenreEmergenceYear")
                        .HasColumnType("int")
                        .HasColumnName("Genre_emergence_year");

                    b.Property<string>("GenreName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Genre_name");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DemiAPI.Models.Album", b =>
                {
                    b.HasOne("DemiAPI.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("AlbumArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("DemiAPI.Models.Artist", b =>
                {
                    b.HasOne("DemiAPI.Models.Genre", "Genre")
                        .WithMany("Artists")
                        .HasForeignKey("ArtistGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DemiAPI.Models.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("DemiAPI.Models.Genre", b =>
                {
                    b.Navigation("Artists");
                });
#pragma warning restore 612, 618
        }
    }
}
